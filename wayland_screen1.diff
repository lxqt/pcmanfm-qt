diff -ruNp pcmanfm-qt-orig/pcmanfm/application.cpp pcmanfm-qt/pcmanfm/application.cpp
--- pcmanfm-qt-orig/pcmanfm/application.cpp	2025-01-10 19:28:36.000000000 +0330
+++ pcmanfm-qt/pcmanfm/application.cpp	2025-01-22 11:53:13.232326426 +0330
@@ -469,10 +469,10 @@ void Application::desktopManager(bool en
                 desktopWindows_.push_back(window);
             }
             else {
-                int n = qMax(allScreens.size(), 1);
+                int n = (underWayland_ ? allScreens.size() : qMax(allScreens.size(), 1));
                 desktopWindows_.reserve(n);
                 for(int i = 0; i < n; ++i) {
-                    DesktopWindow* window = createDesktopWindow(i);
+                    DesktopWindow* window = createDesktopWindow(i, allScreens.at(i)->name());
                     desktopWindows_.push_back(window);
                 }
             }
@@ -812,8 +812,8 @@ void Application::onPropJobFinished() {
     }
 }
 
-DesktopWindow* Application::createDesktopWindow(int screenNum) {
-    DesktopWindow* window = new DesktopWindow(screenNum);
+DesktopWindow* Application::createDesktopWindow(int screenNum, const QString& screenName) {
+    DesktopWindow* window = new DesktopWindow(screenNum, screenName);
 
     if(screenNum == -1) { // one large virtual desktop only
         QRect rect = primaryScreen()->virtualGeometry();
@@ -957,19 +957,33 @@ void Application::onScreenAdded(QScreen*
             }
         }
         else { // a separate screen is added
-            DesktopWindow* window = createDesktopWindow(desktopWindows_.size());
+            if(underWayland_) {
+                for(DesktopWindow* desktopWin : std::as_const(desktopWindows_)) {
+                    if(desktopWin->screenName() == newScreen->name()) {
+                        // the desktop already exists; show it
+                        desktopWin->updateFromSettings(settings_);
+                        desktopWin->show();
+                        desktopWin->queueRelayout();
+                        return;
+                    }
+                }
+            }
+            DesktopWindow* window = createDesktopWindow(desktopWindows_.size(), newScreen->name());
             desktopWindows_.push_back(window);
         }
     }
 }
 
 void Application::onScreenRemoved(QScreen* oldScreen) {
-    if(enableDesktopManager_){
+    if(enableDesktopManager_) {
         disconnect(oldScreen, &QScreen::virtualGeometryChanged, this, &Application::onVirtualGeometryChanged);
         disconnect(oldScreen, &QScreen::availableGeometryChanged, this, &Application::onAvailableGeometryChanged);
-        if(!underWayland_) {
-            disconnect(oldScreen, &QObject::destroyed, this, &Application::onScreenDestroyed);
+        if(underWayland_) {
+            // the desktop will remain hidden until the next session
+            // or when the screen is added again
+            return;
         }
+        disconnect(oldScreen, &QObject::destroyed, this, &Application::onScreenDestroyed);
         if(desktopWindows_.isEmpty()) {
             return;
         }
@@ -1055,8 +1069,7 @@ void Application::onVirtualGeometryChang
     // update desktop geometries
     if(enableDesktopManager_) {
         for(DesktopWindow* desktopWin : std::as_const(desktopWindows_)) {
-            auto desktopScreen = desktopWin->getDesktopScreen();
-            if(desktopScreen) {
+            if(auto desktopScreen = desktopWin->getDesktopScreen()) {
                 desktopWin->setGeometry(desktopScreen->virtualGeometry());
             }
         }
diff -ruNp pcmanfm-qt-orig/pcmanfm/application.h pcmanfm-qt/pcmanfm/application.h
--- pcmanfm-qt-orig/pcmanfm/application.h	2024-12-28 19:43:47.000000000 +0330
+++ pcmanfm-qt/pcmanfm/application.h	2025-01-22 11:55:10.274909502 +0330
@@ -130,7 +130,7 @@ protected Q_SLOTS:
 protected:
     //virtual bool eventFilter(QObject* watched, QEvent* event);
     bool parseCommandLineArgs();
-    DesktopWindow* createDesktopWindow(int screenNum);
+    DesktopWindow* createDesktopWindow(int screenNum, const QString& screenName = QString());
     bool autoMountVolume(GVolume* volume, bool interactive = true);
 
     static void onVolumeAdded(GVolumeMonitor* monitor, GVolume* volume, Application* pThis);
diff -ruNp pcmanfm-qt-orig/pcmanfm/desktopwindow.cpp pcmanfm-qt/pcmanfm/desktopwindow.cpp
--- pcmanfm-qt-orig/pcmanfm/desktopwindow.cpp	2024-12-28 19:43:47.000000000 +0330
+++ pcmanfm-qt/pcmanfm/desktopwindow.cpp	2025-01-22 13:37:22.722023709 +0330
@@ -70,7 +70,7 @@
 
 namespace PCManFM {
 
-DesktopWindow::DesktopWindow(int screenNum):
+DesktopWindow::DesktopWindow(int screenNum, const QString& screenName):
     View(Fm::FolderView::IconMode),
     proxyModel_(nullptr),
     model_(nullptr),
@@ -81,6 +81,7 @@ DesktopWindow::DesktopWindow(int screenN
     fileLauncher_(nullptr),
     desktopHideItems_(false),
     screenNum_(screenNum),
+    screenName_(screenName),
     relayoutTimer_(nullptr),
     selectionTimer_(nullptr),
     trashUpdateTimer_(nullptr),
@@ -116,7 +117,9 @@ DesktopWindow::DesktopWindow(int screenN
     // In some older multihead setups, such as xinerama, every physical screen
     // is treated as a separate desktop so many instances of DesktopWindow may be created.
     // In this case we only want to show desktop icons on the primary screen.
-    if((screenNum_ == 0 || qApp->primaryScreen()->virtualSiblings().size() > 1)) {
+    if(static_cast<Application*>(qApp)->underWayland()
+       || screenNum_ == 0
+       || qApp->primaryScreen()->virtualSiblings().size() > 1) {
         loadItemPositions();
 
         setShadowHidden(settings.shadowHidden());
@@ -490,6 +493,9 @@ void DesktopWindow::setShadow(const QCol
 void DesktopWindow::resizeEvent(QResizeEvent* event) {
     QWidget::resizeEvent(event);
 
+    if(static_cast<Application*>(qApp)->underWayland() && getDesktopScreen() == nullptr) {
+        return;
+    }
     // resize wall paper if needed
     if(isVisible() && wallpaperMode_ != WallpaperNone && wallpaperMode_ != WallpaperTile) {
         updateWallpaper();
@@ -937,6 +943,9 @@ bool DesktopWindow::pickWallpaper() {
 }
 
 void DesktopWindow::nextWallpaper() {
+    if(static_cast<Application*>(qApp)->underWayland() && getDesktopScreen() == nullptr) {
+        return;
+    }
     if(pickWallpaper()) {
         updateWallpaper();
         update();
@@ -944,6 +953,9 @@ void DesktopWindow::nextWallpaper() {
 }
 
 void DesktopWindow::updateFromSettings(Settings& settings, bool changeSlide) {
+    if(static_cast<Application*>(qApp)->underWayland() && getDesktopScreen() == nullptr) {
+        return;
+    }
     // Resetting of the layout will be done after (re-)loading the desktop folder (see onFolderFinishLoading).
     listView_->setUpdatesEnabled(false); // prevent items from shaking
 
@@ -1138,6 +1150,9 @@ void DesktopWindow::addDesktopActions(QM
 }
 
 void DesktopWindow::toggleDesktop() {
+    if(static_cast<Application*>(qApp)->underWayland() && getDesktopScreen() == nullptr) {
+        return;
+    }
     desktopHideItems_ = !desktopHideItems_;
     Settings& settings = static_cast<Application*>(qApp)->settings();
     settings.setDesktopHideItems(desktopHideItems_);
@@ -1191,13 +1206,18 @@ void DesktopWindow::onRowsInserted(const
     Q_UNUSED(parent);
     Q_UNUSED(start);
     Q_UNUSED(end);
-    queueRelayout(100);
+    if(!static_cast<Application*>(qApp)->underWayland() || getDesktopScreen() != nullptr) {
+        queueRelayout(100);
+    }
 }
 
 void DesktopWindow::onRowsAboutToBeRemoved(const QModelIndex& parent, int start, int end) {
     Q_UNUSED(parent);
     Q_UNUSED(start);
     Q_UNUSED(end);
+    if(static_cast<Application*>(qApp)->underWayland() && getDesktopScreen() == nullptr) {
+        return;
+    }
     if(!customItemPos_.empty()) {
         // also delete stored custom item positions for the items currently being removed.
         // Here we can't rely on ProxyFolderModel::fileInfoFromIndex() because, although rows
@@ -1223,7 +1243,9 @@ void DesktopWindow::onRowsAboutToBeRemov
 }
 
 void DesktopWindow::onLayoutChanged() {
-    queueRelayout();
+    if(!static_cast<Application*>(qApp)->underWayland() || getDesktopScreen() != nullptr) {
+        queueRelayout();
+    }
 }
 
 void DesktopWindow::onModelSortFilterChanged() {
@@ -1245,6 +1267,9 @@ void DesktopWindow::onFolderFinishLoadin
         if(model_) {
             connect(model_, &Fm::FolderModel::filesAdded, this, &DesktopWindow::onFilesAdded);
         }
+        if(static_cast<Application*>(qApp)->underWayland() && getDesktopScreen() == nullptr) {
+            return;
+        }
         // With Qt6, resetting of the layout should be done after loading.
         // We also clear the current index to set it to the visually first item.
         selectionModel()->clearCurrentIndex();
@@ -1253,6 +1278,9 @@ void DesktopWindow::onFolderFinishLoadin
 }
 
 void DesktopWindow::onFilesAdded(const Fm::FileInfoList files) {
+    if(static_cast<Application*>(qApp)->underWayland() && getDesktopScreen() == nullptr) {
+        return;
+    }
     if(static_cast<Application*>(qApp)->settings().selectNewFiles()) {
         if(!selectionTimer_) {
             selectionTimer_ = new QTimer (this);
@@ -1535,7 +1563,11 @@ void DesktopWindow::loadItemPositions()
     // load custom item positions from the config file and store them in the memory
     customPosStorage_.clear();
     Settings& settings = static_cast<Application*>(qApp)->settings();
-    QString configFile = QStringLiteral("%1/desktop-items-%2.conf").arg(settings.profileDir(settings.profileName())).arg(screenNum_);
+    QString configFile;
+    if(static_cast<Application*>(qApp)->underWayland())
+        configFile = QStringLiteral("%1/desktop-items-%2.conf").arg(settings.profileDir(settings.profileName())).arg(screenName_);
+    else
+        configFile = QStringLiteral("%1/desktop-items-%2.conf").arg(settings.profileDir(settings.profileName())).arg(screenNum_);
     QSettings file(configFile, QSettings::IniFormat);
 
     const auto names = file.childGroups();
@@ -1593,7 +1625,11 @@ void DesktopWindow::retrieveCustomPos()
 void DesktopWindow::saveItemPositions() {
     // write custom item positions to the config file
     Settings& settings = static_cast<Application*>(qApp)->settings();
-    QString configFile = QStringLiteral("%1/desktop-items-%2.conf").arg(settings.profileDir(settings.profileName())).arg(screenNum_);
+    QString configFile;
+    if(static_cast<Application*>(qApp)->underWayland())
+        configFile = QStringLiteral("%1/desktop-items-%2.conf").arg(settings.profileDir(settings.profileName())).arg(screenName_);
+    else
+        configFile = QStringLiteral("%1/desktop-items-%2.conf").arg(settings.profileDir(settings.profileName())).arg(screenNum_);
     QSettings file(configFile, QSettings::IniFormat);
     file.clear(); // remove all existing entries
 
@@ -1933,7 +1969,9 @@ bool DesktopWindow::event(QEvent* event)
 #undef FontChange // FontChange is defined in the headers of XLib and clashes with Qt, let's undefine it.
     case QEvent::StyleChange:
     case QEvent::FontChange:
-        queueRelayout();
+        if(!static_cast<Application*>(qApp)->underWayland() || getDesktopScreen() != nullptr) {
+            queueRelayout();
+        }
         break;
 
     default:
@@ -1951,7 +1989,7 @@ bool DesktopWindow::eventFilter(QObject*
         switch(event->type()) {
         case QEvent::StyleChange:
         case QEvent::FontChange:
-            if(model_) {
+            if(model_ && (!static_cast<Application*>(qApp)->underWayland() || getDesktopScreen() != nullptr)) {
                 queueRelayout();
             }
             break;
@@ -2428,6 +2466,7 @@ void DesktopWindow::paintEvent(QPaintEve
     QWidget::paintEvent(event);
 }
 
+// Used only on X11.
 void DesktopWindow::setScreenNum(int num) {
     if(screenNum_ != num) {
         screenNum_ = num;
@@ -2438,16 +2477,26 @@ void DesktopWindow::setScreenNum(int num
 
 QScreen* DesktopWindow::getDesktopScreen() const {
     QScreen* desktopScreen = nullptr;
-    if(screenNum_ == -1) {
-        desktopScreen = qApp->primaryScreen();
+    if(static_cast<Application*>(qApp)->underWayland()) {
+        const auto allScreens = qApp->screens();
+        for(const auto& screen : allScreens) {
+            if(screen->name() == screenName_) {
+                return screen;
+            }
+        }
     }
     else {
-        const auto allScreens = qApp->screens();
-        if(allScreens.size() > screenNum_) {
-            desktopScreen = allScreens.at(screenNum_);
+        if(screenNum_ == -1) {
+            desktopScreen = qApp->primaryScreen();
         }
-        if(desktopScreen == nullptr && windowHandle()) {
-            desktopScreen = windowHandle()->screen();
+        else {
+            const auto allScreens = qApp->screens();
+            if(allScreens.size() > screenNum_) {
+                desktopScreen = allScreens.at(screenNum_);
+            }
+            if(desktopScreen == nullptr && windowHandle()) {
+                desktopScreen = windowHandle()->screen();
+            }
         }
     }
     return desktopScreen;
diff -ruNp pcmanfm-qt-orig/pcmanfm/desktopwindow.h pcmanfm-qt/pcmanfm/desktopwindow.h
--- pcmanfm-qt-orig/pcmanfm/desktopwindow.h	2024-12-28 19:43:47.000000000 +0330
+++ pcmanfm-qt/pcmanfm/desktopwindow.h	2025-01-22 12:16:25.195027664 +0330
@@ -56,7 +56,7 @@ public:
         WallpaperZoom
     };
 
-    explicit DesktopWindow(int screenNum);
+    explicit DesktopWindow(int screenNum, const QString& screenName = QString());
     virtual ~DesktopWindow();
 
     void setForeground(const QColor& color);
@@ -84,6 +84,10 @@ public:
 
     void setScreenNum(int num);
 
+    QString screenName() const {
+        return screenName_;
+    }
+
     QScreen* getDesktopScreen() const;
 
 protected:
@@ -193,7 +197,8 @@ private:
     Launcher fileLauncher_;
     bool desktopHideItems_;
 
-    int screenNum_;
+    int screenNum_; // for X11
+    QString screenName_; // for Wayland
     std::unordered_map<std::string, QPoint> customItemPos_; // real custom positions
     std::unordered_map<std::string, QPoint> customPosStorage_; // savable custom positions
     QTimer* relayoutTimer_;
